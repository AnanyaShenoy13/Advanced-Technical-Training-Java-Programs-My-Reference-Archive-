Memory Management & Node Deletion in Java
1. How Java Handles Memory
âœ” Java uses automatic garbage collection (GC) to manage memory.
âœ” Objects exist in the Heap Memory until they are no longer referenced.
âœ” Unused objects are automatically removed by GC, so no manual deletion is needed.

2. Removing a Node in a Linked List
Since Java doesn't use manual deletion (delete in C++), nodes are removed by breaking references.
âœ” If no reference points to an object, GC will reclaim its memory.
âœ” Disconnected nodes become unreachable, and Java frees their memory automatically.

3. Difference Between temp = null; and temp.next = null;
A. temp = null; (Does NOT delete the node)
ðŸš« Only removes the local reference, but the node still exists in memory if head or other references point to it.
Node temp = head;
temp = null;  // temp loses reference, but node is still linked

î·™î·š
Issue: The node remains linked in the list, so it is not removed.

B. temp.next = null; (Properly Disconnects the Node)
âœ… Breaks the node's connection, making it unreachable.
Node temp = head;
head = head.next;  // Move head forward
temp.next = null;  // Disconnect the removed node


âœ” Now, Javaâ€™s Garbage Collector can detect the node as unused and free memory.

4. Garbage Collection in Action
- Java automatically detects objects with no references.
- The GC removes unreferenced nodes, freeing up memory.
- No need to manually deleteâ€”just disconnect the node properly, and GC cleans up.

5. Best Practices
âœ” Always unlink nodes properly before removal.
âœ” Use temp.next = null; to ensure complete disconnection.
âœ” Javaâ€™s GC ensures efficient memory cleanup
